// https://getintodevops.com/blog/building-your-first-docker-image-with-jenkins-2-guide-for-developers
properties([[$class: 'CopyArtifactPermissionProperty', projectNames: '*']])

def buildCompilerExplorer() {
    def app
    stage("Build compiler explorer") {
        dir ('cheri-compiler-explorer') {
            // Get the CheriBSD sysroots by fetching the SDKs:
            copyArtifacts filter: 'artifacts-mips64-purecap/cheribsd-sysroot.tar.xz,artifacts-riscv64-purecap/cheribsd-sysroot.tar.xz,artifacts-morello-purecap/cheribsd-sysroot.tar.xz', projectName: 'CheriBSD-pipeline/master', selector: lastSuccessful()
            copyArtifacts filter: 'morello-clang-llvm.tar.xz', projectName: 'Morello-LLVM-linux/morello%2Fmaster', selector: lastSuccessful()
            sh """
cp -f ../cheri-clang-llvm.tar.xz .
for i in mips64-purecap riscv64-purecap morello-purecap; do
    rm -rf "sysroot-\${i}"
    tar Jxf "artifacts-\${i}/cheribsd-sysroot.tar.xz"
    mv "sysroot" "sysroot-\${i}"
    rm -f "artifacts-\${i}/cheribsd-sysroot.tar.xz"
done
"""
            // To force an update of nodejs+compiler-explorer:
            // app = docker.build("ctsrd/cheri-compiler-explorer", "--pull --no-cache .")
            app = docker.build("ctsrd/cheri-compiler-explorer", "--pull .")
        }
    }
    // TODO: make the pushing configurable
    if (true) {
        stage("Push image") {
            docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                app.push("${env.BUILD_NUMBER}")
                app.push("latest")
            }
        }
    }
}

def doBuild() {
    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */
        checkout scm
        sh "pwd"
    }
    buildCompilerExplorer()
}


try {
    node("docker") {
        doBuild()
    }
} catch (e) {
    slackSend channel: '#jenkins', color: '#FF9FA1',
        message: "${env.JOB_NAME} ${env.BUILD_NUMBER} failed: ${e}! (<${env.BUILD_URL}|Open>)",
        tokenCredentialId: 'slack-token'
    currentBuild.result = 'FAILURE'
    throw e
}
