// https://getintodevops.com/blog/building-your-first-docker-image-with-jenkins-2-guide-for-developers
properties([[$class: 'CopyArtifactPermissionProperty', projectNames: '*']])
cmakeArchive = 'cmake-3.10.2-Linux-x86_64.tar.gz'

def buildSDKImage() {
    def app
    stage("Build image") {
        sh "pwd && ls -la"
        /* This builds the actual image; synonymous to docker build on the command line */
        app = docker.build("ctsrd/cheri-sdk", "-q .")
    }

    stage("Test image") {
        app.inside {
            sh "env | sort"
            // check that QEMU works
            sh "qemu-system-cheri256 --help > /dev/null"
            sh "cheri-unknown-freebsd-clang --version"
            sh "ls -l /cheri-sdk/bin"

        }
    }
    // TODO: make the pushing configurable
    if (true) {
        stage("Push image") {
            /* Finally, we'll push the image with two tags:
             * First, the incremental build number from Jenkins
             * Second, the 'latest' tag.
             * Pushing multiple tags is cheap, as all the layers are reused. */
            docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                app.push("${env.BUILD_NUMBER}")
                app.push("latest")
            }
        }
    }
}

node("docker") {
    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */
        checkout scm
        sh "pwd"
    }
    stage("Copy artifacts") {
        // fetch cmake
        sh "test -e $cmakeArchive || curl -O https://cmake.org/files/v3.10/$cmakeArchive"
        // copyArtifacts filter: 'binutils.tar.bz2', projectName: 'CHERI-binutils/label=linux/', selector: lastSuccessful()
        copyArtifacts filter: 'elftoolchain.tar.xz', projectName: 'elftoolchain/label=linux/'
        // For clang copy the last successful build instead of the one with all tests passed for now since there are some flaky tests
        copyArtifacts filter: 'cheri-multi-master-clang-llvm.tar.xz', projectName: 'CLANG-LLVM-master/CPU=cheri-multi,label=linux/', selector: lastSuccessful()
        copyArtifacts filter: 'qemu-linux/bin/qemu-system*', projectName: 'qemu/qemu-cheri'
        // TODO: include newlib baremetal?
        sh "pwd && ls -la"
    }
    buildSDKImage('')
    // don't use for loops and closures: http://blog.freeside.co/2013/03/29/groovy-gotcha-for-loops-and-closure-scope/
    //stage('Build SDK docker images') {
    //    parallel targets.collectEntries{
    //       [(it): { buildSDKImage(it) }]
    //    }
    //}
}
