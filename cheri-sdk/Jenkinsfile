// https://getintodevops.com/blog/building-your-first-docker-image-with-jenkins-2-guide-for-developers
properties([[$class: 'CopyArtifactPermissionProperty', projectNames: '*']])

cmakeVersionMaj = 3
cmakeVersionMin = 18
cmakeVersionPat = 1
cmakeVersionFull="${cmakeVersionMaj}.${cmakeVersionMin}.${cmakeVersionPat}"
cmakeUrlDir = "v${cmakeVersionMaj}.${cmakeVersionMin}"
cmakeArchive = "cmake-${cmakeVersionFull}-Linux-x86_64.tar.gz"

def buildSDKImage() {
    def app
    stage("Build image") {
        dir ('cheri-sdk') {
            sh "cp -f ../cheri-clang-llvm.tar.xz ../${cmakeArchive} . && pwd && ls -la"
            /* This builds the actual image; synonymous to docker build on the command line */
            app = docker.build("ctsrd/cheri-sdk", "--pull --build-arg cmake_version=${cmakeVersionFull} .")
        }
    }

    stage("Test image") {
        app.inside {
            sh "env | sort"
            // check that QEMU works
            sh "qemu-system-cheri128 --help > /dev/null"
            sh "qemu-system-riscv64cheri --help > /dev/null"
            sh "mips64-unknown-freebsd-clang --version"
            sh "clang++ --version"
            sh "ls -l /cheri-sdk/bin"

        }
    }
    // TODO: make the pushing configurable
    if (true) {
        stage("Push image") {
            /* Finally, we'll push the image with two tags:
             * First, the incremental build number from Jenkins
             * Second, the 'latest' tag.
             * Pushing multiple tags is cheap, as all the layers are reused. */
            docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                app.push("${env.BUILD_NUMBER}")
                app.push("latest")
            }
        }
    }
}

def buildCompilerExplorer() {
    def app
    stage("Build compiler explorer") {
        dir ('cheri-compiler-explorer') {
            // Get the CheriBSD headers by fetching the MIPS SDK:
            copyArtifacts filter: 'artifacts-mips64-purecap/cheribsd-sysroot.tar.xz,artifacts-riscv64-purecap/cheribsd-sysroot.tar.xz', projectName: 'CheriBSD-pipeline/master', selector: lastSuccessful()
            copyArtifacts filter: 'morello-clang-llvm.tar.xz', projectName: 'Morello-LLVM-linux', selector: lastSuccessful()
            sh """
cp -f ../cheri-clang-llvm.tar.xz .
# Extract to a subdir to only copy the includes
for i in mips64-purecap riscv64-purecap; do
    rm -rf "sysroot-\${i}" && mkdir -p "sysroot-\${i}/tmp"
    tar Jxf "artifacts-\${i}/cheribsd-sysroot.tar.xz" --strip-components 1 -C "sysroot-\${i}"
    mkdir "sysroot-\${i}/usr"
    mv "sysroot-\${i}/sysroot/usr/include" "sysroot-\${i}/usr/include"
    # TODO: also keep some of the libraries?
    rm -rf "sysroot-\${i}/sysroot/"
    rm -f "artifacts-\${i}/cheribsd-sysroot.tar.xz"
done
"""
            // To force an update of nodejs+compiler-explorer:
            // app = docker.build("ctsrd/cheri-compiler-explorer", "--pull --no-cache .")
            app = docker.build("ctsrd/cheri-compiler-explorer", "--pull .")
        }
    }
    // TODO: make the pushing configurable
    if (true) {
        stage("Push image") {
            docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                app.push("${env.BUILD_NUMBER}")
                app.push("latest")
            }
        }
    }
}

def doBuild() {
    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */
        checkout scm
        sh "pwd"
    }
    stage("Copy artifacts") {
        // fetch cmake
        sh "test -e $cmakeArchive || curl -O https://cmake.org/files/$cmakeUrlDir/$cmakeArchive"
        // copyArtifacts filter: 'binutils.tar.bz2', projectName: 'CHERI-binutils/label=linux/', selector: lastSuccessful()
        // copyArtifacts filter: 'elftoolchain.tar.xz', projectName: 'elftoolchain/label=linux/'
        // For clang copy the last successful build instead of the one with all tests passed for now since there are some flaky tests
        copyArtifacts filter: 'cheri-clang-llvm.tar.xz', projectName: 'CLANG-LLVM-linux/master', selector: lastSuccessful()
        sh "pwd && ls -la"
    }
    buildSDKImage()
    buildCompilerExplorer()
}


try {
    node("docker") {
        doBuild()
    }
} catch (e) {
    slackSend channel: '#jenkins', color: '#FF9FA1',
        message: "${env.JOB_NAME} ${env.BUILD_NUMBER} failed: ${e}! (<${env.BUILD_URL}|Open>)",
        tokenCredentialId: 'slack-token'
    currentBuild.result = 'FAILURE'
    throw e
}
