// https://getintodevops.com/blog/building-your-first-docker-image-with-jenkins-2-guide-for-developers
properties([[$class: 'CopyArtifactPermissionProperty', projectNames: '*']])

cmakeVersionMaj = 3
cmakeVersionMin = 18
cmakeVersionPat = 1
cmakeVersionFull="${cmakeVersionMaj}.${cmakeVersionMin}.${cmakeVersionPat}"
cmakeUrlDir = "v${cmakeVersionMaj}.${cmakeVersionMin}"
cmakeArchive = "cmake-${cmakeVersionFull}-Linux-x86_64.tar.gz"

def buildSDKImage(String toolchain) {
    def llvmJob = "CLANG-LLVM-linux/master"
    String llvmSdkDir = 'sdk'
    if (toolchain == 'morello') {
        llvmJob = "Morello-LLVM-linux/morello%2Fmaster"
        llvmSdkDir = 'morello-sdk'
    }

    stage("Copy artifacts") {
        // fetch cmake
        sh "test -e $cmakeArchive || curl -O https://cmake.org/files/$cmakeUrlDir/$cmakeArchive"
        // For clang copy the last successful build instead of the one with all tests passed for now since there are some flaky tests
        copyArtifacts filter: "${toolchain}-clang-llvm.tar.xz", projectName: llvmJob, selector: lastSuccessful()
    }

    def app
    stage("Build image") {
        sh 'pwd && cp -f ../cheri-sdk/Dockerfile . && ls -la'
        /* This builds the actual image; synonymous to docker build on the command line */
        // We clone cheribuild with a RUN command so need --no-cache
        app = docker.build("ctsrd/${toolchain}-sdk", "--pull --no-cache --build-arg cmake_version=${cmakeVersionFull} --build-arg toolchain=${toolchain} --build-arg llvm_sdk_dir=${llvmSdkDir} .")
    }

    stage("Test image") {
        app.inside {
            sh "env | sort"
            // check that QEMU works
            sh "qemu-system-cheri128 --help > /dev/null"
            sh "qemu-system-morello --help > /dev/null"
            sh "qemu-system-riscv64cheri --help > /dev/null"
            sh "clang++ --version"
            sh "ls -l /opt/cheri/output/${llvmSdkDir}/bin"

        }
    }
    // TODO: make the pushing configurable
    if (true) {
        stage("Push image") {
            /* Finally, we'll push the image with two tags:
             * First, the incremental build number from Jenkins
             * Second, the 'latest' tag.
             * Pushing multiple tags is cheap, as all the layers are reused. */
            docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                app.push("${env.BUILD_NUMBER}")
                app.push("latest")
            }
        }
    }
}

def doBuild() {
    stage('Clone repository') {
        sh "rm -rf build-*"
        /* Let's make sure we have the repository cloned to our workspace */
        checkout scm
        sh "pwd"
    }
    def toolchains = ['cheri', 'morello']
    // don't user for loops and closures: http://blog.freeside.co/2013/03/29/groovy-gotcha-for-loops-and-closure-scope/
    stage('Build SDK docker images') {
        parallel toolchains.collectEntries { String toolchain ->
            [toolchain, {
                dir("build-${toolchain}") {
                    buildSDKImage(toolchain)
                }
            }]
        }
    }
    stage("Cleaning up") {
        pwd
        sh "rm -rf build-*"
        sh "ls -laR"
    }
}

try {
    node("docker") {
        doBuild()
    }
} catch (e) {
    slackSend channel: '#jenkins', color: '#FF9FA1',
        message: "${env.JOB_NAME} ${env.BUILD_NUMBER} failed: ${e}! (<${env.BUILD_URL}|Open>)",
        tokenCredentialId: 'slack-token'
    currentBuild.result = 'FAILURE'
    throw e
}
