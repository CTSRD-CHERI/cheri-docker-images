// https://getintodevops.com/blog/building-your-first-docker-image-with-jenkins-2-guide-for-developers
properties([[$class: 'CopyArtifactPermissionProperty', projectNames: '*']])
def targets = ['mips-purecap']

def buildCheriBSDImages(String suffix) {
    def app
    stage("Copy ${cpu}-${ABI} artifact") {
        echo 'Copying CHERIBSD artifacts'
        copyArtifacts filter: "artifacts-${suffix}", projectName: 'CheriBSD-pipeline/master', selector: lastSuccessful()
        sh "echo ${suffix} && find ."
        sh "cd artifacts-${suffix} && tar xJf cheribsd-sysroot.tar.xz"
    }
    stage("Build CheriBSD ${suffix} SDK image") {
        sh 'pwd && cp -f ../cheribsd/Dockerfile . && ls -la'
        app = docker.build("ctsrd/cheribsd-sdk-${suffix}", "-q .")
    }
    stage("Push ${cpu}-${ABI} image") {
        docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
            app.push("${env.BUILD_NUMBER}")
            app.push("latest")
        }
    }
}

node("docker") {
    stage('Clone repository') {
        sh "rm -rf build-*"
        /* Let's make sure we have the repository cloned to our workspace */
        checkout scm
        sh "pwd"
    }
    // don't user for loops and closures: http://blog.freeside.co/2013/03/29/groovy-gotcha-for-loops-and-closure-scope/
    stage('Build SDK docker images') {
        parallel targets.each {
            [(it): {
                dir("build-${it}") {
                    buildCheriBSDImage(it)
                }
            }]
        }
    }
    stage("Cleaning up") {
        pwd
        sh "rm -rf build-*"
        sh "ls -laR"
    }
}
