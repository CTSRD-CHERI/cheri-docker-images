def targets = ['mips-purecap', 'riscv64-purecap', 'mips-nocheri', 'riscv64', 'aarch64', 'amd64']

def buildCheriBSDImage(String suffix) {
    def sdkImage
    def qemuImage
    stage("Copy CheriBSD ${suffix} artifact") {
        echo "Copying CheriBSD artifacts (artifacts-${suffix}/**)"
        copyArtifacts filter: "artifacts-${suffix}/**", projectName: 'CheriBSD-pipeline/master', selector: lastSuccessful()
        sh """
echo ${suffix}
find .
mv -fv artifacts-${suffix}/* .
# tar xJf cheribsd-sysroot.tar.xz
"""
    }
    stage("Build CheriBSD (${suffix}) SDK image") {
        sh 'pwd && cp -f ../cheribsd/sdk/Dockerfile . && ls -la'
        sdkImage = docker.build("ctsrd/cheribsd-sdk-${suffix}", ".")
    }
    stage("Build CheriBSD (${suffix}) QEMU image") {
        sh 'pwd && cp -f ../cheribsd/qemu/Dockerfile . && ls -la'
        qemuImage = docker.build("ctsrd/cheribsd-qemu-${suffix}", ".")
    }
    stage("Push CheriBSD (${suffix}) SDK and QEMU image") {
        docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
            sdkImage.push("${env.BUILD_NUMBER}")
            sdkImage.push("latest")
            qemuImage.push("${env.BUILD_NUMBER}")
            qemuImage.push("latest")
        }
    }
    stage("Test CheriBSD (${suffix}) SDK image") {
        sdkImage.inside {
            sh "env | sort"
            sh "clang++ --version"
            sh "cheribuild.py --version"
            sh "ls -la /cheri-sdk/bin"
            sh "ls -la /cheri-sdk"

        }
    }
    stage("Test CheriBSD (${suffix}) SDK image") {
        // TODO: should test QEMU booting cheribsd
        qemuImage.inside {
            sh "env | sort"
            sh "cheribuild.py --version"
            sh "ls -la /cheri-sdk/bin"
            sh "ls -la /cheri-sdk"
            '''
for i in cheri128 riscv64cheri aarch64 x86_64;
do
    which qemu-system-$i
    qemu-system-$i --help > /dev/null
done
'''
        }
    }
}

node("docker") {
    stage('Clone repository') {
        sh "rm -rf build-*"
        /* Let's make sure we have the repository cloned to our workspace */
        checkout scm
        sh "pwd"
    }
    // don't user for loops and closures: http://blog.freeside.co/2013/03/29/groovy-gotcha-for-loops-and-closure-scope/
    stage('Build SDK docker images') {
        parallel targets.collectEntries { String suffix ->
            [suffix, {
                dir("build-${suffix}") {
                    buildCheriBSDImage(suffix)
                }
            }]
        }
    }
    stage("Cleaning up") {
        pwd
        sh "rm -rf build-*"
        sh "ls -laR"
    }
}
