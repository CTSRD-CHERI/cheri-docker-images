def buildCheriBSDImage(String suffix) {
    def sdkImage
    def qemuImage
    def sdkQemuImage
    stage("Copy CheriBSD ${suffix} artifact") {
        echo "Copying CheriBSD artifacts (artifacts-${suffix}/**)"
        copyArtifacts filter: "artifacts-${suffix}/**", projectName: 'CheriBSD-pipeline/master', selector: lastSuccessful()
        sh """
echo ${suffix}
find .
for f in cheribsd-sysroot.tar.xz cheribsd-${suffix}.img.xz kernel.xz; do
    mv -fv artifacts-${suffix}/\$f .
done
"""
    }
    stage("Build CheriBSD (${suffix}) SDK image") {
        sh 'pwd && cp -f ../cheribsd/sdk/Dockerfile . && ls -la'
        sdkImage = docker.build("ctsrd/cheribsd-sdk-${suffix}", "--pull .")
    }
    stage("Build CheriBSD (${suffix}) QEMU image") {
        sh 'pwd && cp -f ../cheribsd/qemu/Dockerfile . && ls -la'
        qemuImage = docker.build("ctsrd/cheribsd-qemu-${suffix}", " --pull .")
    }
    stage("Build CheriBSD (${suffix}) SDK+QEMU image") {
        sh 'pwd && cp -f ../cheribsd/sdk-qemu/Dockerfile . && ls -la'
        sdkQemuImage = docker.build("ctsrd/cheribsd-sdk-qemu-${suffix}", " --build-arg TARGET_ARCH=${suffix} --pull .")
    }
    stage("Test CheriBSD (${suffix}) SDK image") {
        sdkImage.inside {
            sh "env | sort"
            sh "clang++ --version"
            sh "cheribuild.py --list-targets"
            sh "ls -la /cheri-sdk/bin"
            sh "ls -la /cheri-sdk"

        }
    }
    stage("Test CheriBSD (${suffix}) QEMU image") {
        // TODO: should test QEMU booting cheribsd
        qemuImage.inside {
            sh "env | sort"
            sh "cheribuild.py --list-targets"
            sh "ls -la /cheri-sdk/bin"
            sh "ls -la /cheri-sdk"
            '''
for i in cheri128 riscv64cheri aarch64 x86_64;
do
    which qemu-system-$i
    qemu-system-$i --help > /dev/null
done
'''
        }
    }
    stage("Test CheriBSD (${suffix}) SDK+QEMU image") {
        // TODO: should test QEMU booting cheribsd
        sdkQemuImage.inside {
            sh "env | sort"
            sh "clang++ --version"
            sh "cheribuild.py --list-targets"
            sh "ls -la /cheri-sdk/bin"
            sh "ls -la /cheri-sdk"
            '''
for i in cheri128 riscv64cheri aarch64 x86_64;
do
    which qemu-system-$i
    qemu-system-$i --help > /dev/null
done
'''
        }
    }
    stage("Push CheriBSD (${suffix}) SDK, QEMU and SDK+QEMU images") {
        docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
            sdkImage.push("${env.BUILD_NUMBER}")
            sdkImage.push("latest")
            qemuImage.push("${env.BUILD_NUMBER}")
            qemuImage.push("latest")
            sdkQemuImage.push("${env.BUILD_NUMBER}")
            sdkQemuImage.push("latest")
        }
    }
}

def doBuild() {
    stage('Clone repository') {
        sh "rm -rf build-*"
        /* Let's make sure we have the repository cloned to our workspace */
        checkout scm
        sh "pwd"
    }
    def targets = ['mips64-purecap', 'riscv64-purecap', 'mips64', 'riscv64', 'aarch64', 'amd64']
    // don't user for loops and closures: http://blog.freeside.co/2013/03/29/groovy-gotcha-for-loops-and-closure-scope/
    stage('Build SDK docker images') {
        parallel targets.collectEntries { String suffix ->
            [suffix, {
                dir("build-${suffix}") {
                    buildCheriBSDImage(suffix)
                }
            }]
        }
    }
    stage("Cleaning up") {
        pwd
        sh "rm -rf build-*"
        sh "ls -laR"
    }
}

try {
    node("docker") {
        doBuild()
    }
} catch (e) {
    slackSend channel: '#jenkins', color: '#FF9FA1',
        message: "${env.JOB_NAME} ${env.BUILD_NUMBER} failed: ${e}! (<${env.BUILD_URL}|Open>)",
        tokenCredentialId: 'slack-token'
    currentBuild.result = 'FAILURE'
    throw e
}
